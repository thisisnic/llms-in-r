name: Readability Check

on:
  pull_request:
    paths:
      - '**.qmd'

permissions:
  pull-requests: write
  contents: read

jobs:
  readability:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed qmd files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **.qmd

      - name: Set up Python
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          pip install textstat

      - name: Calculate readability scores
        if: steps.changed-files.outputs.any_changed == 'true'
        id: readability
        run: |
          python3 << 'EOF'
          import textstat
          import os
          import re

          def extract_prose_from_qmd(content):
              """Extract only prose text from Quarto markdown, excluding code chunks and YAML."""
              lines = content.split('\n')
              prose_lines = []
              in_code_chunk = False
              in_yaml = False

              for i, line in enumerate(lines):
                  # Check for YAML frontmatter at start
                  if i == 0 and line.strip() == '---':
                      in_yaml = True
                      continue

                  # End of YAML frontmatter
                  if in_yaml and line.strip() == '---':
                      in_yaml = False
                      continue

                  # Skip YAML lines
                  if in_yaml:
                      continue

                  # Check for code chunk start (```{lang} or ```)
                  if re.match(r'^```', line):
                      in_code_chunk = not in_code_chunk
                      continue

                  # Skip code chunk content
                  if in_code_chunk:
                      continue

                  # Remove inline code
                  line = re.sub(r'`[^`]+`', '', line)

                  # Remove HTML comments
                  line = re.sub(r'<!--.*?-->', '', line)

                  # Keep the line if it has content
                  if line.strip():
                      prose_lines.append(line)

              return '\n'.join(prose_lines)

          changed_files = """${{ steps.changed-files.outputs.all_changed_files }}"""
          files = changed_files.split()

          results = []

          for file in files:
              try:
                  with open(file, 'r', encoding='utf-8') as f:
                      content = f.read()

                  # Extract only prose content
                  prose_content = extract_prose_from_qmd(content)

                  if not prose_content.strip():
                      results.append(f"**{file}**: No prose content found")
                      results.append("")
                      continue

                  # Calculate Flesch-Kincaid Grade Level
                  fk_grade = textstat.flesch_kincaid_grade(prose_content)
                  # Calculate Flesch Reading Ease
                  fre_score = textstat.flesch_reading_ease(prose_content)

                  results.append(f"**{file}**")
                  results.append(f"- Flesch-Kincaid Grade Level: {fk_grade:.2f}")
                  results.append(f"- Flesch Reading Ease: {fre_score:.2f}")
                  results.append("")
              except Exception as e:
                  results.append(f"**{file}**: Error - {str(e)}")
                  results.append("")

          comment = "## Readability Scores\n\n" + "\n".join(results)
          comment += "\n*Note: Scores calculated on prose content only (excluding code chunks, YAML, and inline code)*"

          # Write to output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write("comment<<EOF\n")
              f.write(comment)
              f.write("\nEOF\n")
          EOF

      - name: Comment on PR
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.readability.outputs.comment }}`
            })